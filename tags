!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
BLOCKS_H_INCLUDED	src/blocks.h	2;"	d
CMAKE_BINARY_DIR	src/Makefile	/^CMAKE_BINARY_DIR = \/home\/ethan\/Programming\/FallingBlocks$/;"	m
CMAKE_COMMAND	src/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_EDIT_COMMAND	src/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_SOURCE_DIR	src/Makefile	/^CMAKE_SOURCE_DIR = \/home\/ethan\/Programming\/FallingBlocks$/;"	m
MainLoop	src/main.cpp	/^void MainLoop()$/;"	f	signature:()
MainLoop	src/main.cpp	/^void MainLoop();$/;"	p	file:	signature:()
MoveEvents	src/main.cpp	/^void MoveEvents()$/;"	f	signature:()
MoveEvents	src/main.cpp	/^void MoveEvents();$/;"	p	file:	signature:()
PressedKeys	src/main.cpp	/^boost::array<int,32> PressedKeys;$/;"	v
RM	src/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
ReSize	src/main.cpp	/^void ReSize (int w, int h)$/;"	f	signature:(int w, int h)
ReSize	src/main.cpp	/^void ReSize (int w, int h);$/;"	p	file:	signature:(int w, int h)
RenderScene	src/main.cpp	/^void RenderScene()$/;"	f	signature:()
RenderScene	src/main.cpp	/^void RenderScene();$/;"	p	file:	signature:()
SHELL	src/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	src/Makefile	/^SUFFIXES =$/;"	m
SetupRC	src/main.cpp	/^void SetupRC()$/;"	f	signature:()
SetupRC	src/main.cpp	/^void SetupRC();$/;"	p	file:	signature:()
StartMoveEvents	src/main.cpp	/^void StartMoveEvents()$/;"	f	signature:()
StartMoveEvents	src/main.cpp	/^void StartMoveEvents();$/;"	p	file:	signature:()
arrblock	src/blocks.h	/^   arrblok arrblock;$/;"	m	class:bord	access:private
arrblok	src/blocks.h	/^class arrblok$/;"	c
arrblok::checkrow	src/blocks.h	/^   bool checkrow(int y);$/;"	p	class:arrblok	access:public	signature:(int y)
arrblok::checksquare	src/blocks.h	/^   bool checksquare(int x,int y);$/;"	p	class:arrblok	access:public	signature:(int x,int y)
arrblok::clearrow	src/blocks.h	/^   void clearrow(int y);$/;"	p	class:arrblok	access:public	signature:(int y)
arrblok::drawall	src/blocks.h	/^   void drawall();$/;"	p	class:arrblok	access:public	signature:()
arrblok::rowblock	src/blocks.h	/^   rowblok rowblock[ROWS];$/;"	m	class:arrblok	access:private
att	src/main.cpp	/^    GLint att[] = { GLX_RGBA, GLX_DEPTH_SIZE, 24, GLX_DOUBLEBUFFER, None };$/;"	l
block	src/blocks.h	/^   blok block[4];$/;"	m	class:selblok	access:private
block	src/blocks.h	/^   blok block[COLUNMS];$/;"	m	class:rowblok	access:private
blok	src/blocks.h	/^class blok$/;"	c
blok::color	src/blocks.h	/^   int color;$/;"	m	class:blok	access:private
blok::draw	src/blocks.h	/^   void draw();$/;"	p	class:blok	access:public	signature:()
blok::getcol	src/blocks.h	/^   int getcol();$/;"	p	class:blok	access:public	signature:()
blok::getpos	src/blocks.h	/^   const cord& getpos();$/;"	p	class:blok	access:public	signature:()
blok::pos	src/blocks.h	/^   cord pos;$/;"	m	class:blok	access:private
blok::setcol	src/blocks.h	/^   void setcol(int col);$/;"	p	class:blok	access:public	signature:(int col)
blok::setpos	src/blocks.h	/^   void setpos(const cord &pos);$/;"	p	class:blok	access:public	signature:(const cord &pos)
boost::this_thread::sleep	src/main.cpp	/^        boost::this_thread::sleep(time);$/;"	p	class:boost::this_thread	file:	signature:(time)
bord	src/blocks.h	/^class bord$/;"	c
bord::arrblock	src/blocks.h	/^   arrblok arrblock;$/;"	m	class:bord	access:private
bord::drawall	src/blocks.h	/^   void drawall();$/;"	p	class:bord	access:public	signature:()
bord::moveall	src/blocks.h	/^   void moveall();$/;"	p	class:bord	access:public	signature:()
bord::selblock	src/blocks.h	/^   selblok selblock;$/;"	m	class:bord	access:private
checkrow	src/blocks.h	/^   bool checkrow();$/;"	p	class:rowblok	access:public	signature:()
checkrow	src/blocks.h	/^   bool checkrow(int y);$/;"	p	class:arrblok	access:public	signature:(int y)
checksquare	src/blocks.h	/^   bool checksquare(int x);$/;"	p	class:rowblok	access:public	signature:(int x)
checksquare	src/blocks.h	/^   bool checksquare(int x,int y);$/;"	p	class:arrblok	access:public	signature:(int x,int y)
clearrow	src/blocks.h	/^   void clearrow();$/;"	p	class:rowblok	access:public	signature:()
clearrow	src/blocks.h	/^   void clearrow(int y);$/;"	p	class:arrblok	access:public	signature:(int y)
cmap	src/main.cpp	/^    Colormap cmap = XCreateColormap(dpy, root, vi->visual, AllocNone); \/\/create color map$/;"	l
color	src/blocks.h	/^   int color;$/;"	m	class:blok	access:private
cord	src/blocks.h	/^typename boost::tuple<float, float> cord;$/;"	v
dpy	src/main.cpp	/^Display *dpy;$/;"	v
draw	src/blocks.h	/^   void draw();$/;"	p	class:blok	access:public	signature:()
drawall	src/blocks.h	/^   drawall();$/;"	p	class:selblok	access:public	signature:()
drawall	src/blocks.h	/^   void drawall();$/;"	p	class:arrblok	access:public	signature:()
drawall	src/blocks.h	/^   void drawall();$/;"	p	class:bord	access:public	signature:()
drawall	src/blocks.h	/^   void drawall();$/;"	p	class:rowblok	access:public	signature:()
getcol	src/blocks.h	/^   int getcol();$/;"	p	class:blok	access:public	signature:()
getpos	src/blocks.h	/^   const cord& getpos();$/;"	p	class:blok	access:public	signature:()
glc	src/main.cpp	/^GLXContext glc;$/;"	v
gwa	src/main.cpp	/^    XWindowAttributes gwa;$/;"	l
main	src/main.cpp	/^int main ()$/;"	f	signature:()
moveall	src/blocks.h	/^   void moveall();$/;"	p	class:bord	access:public	signature:()
moved	src/blocks.h	/^   moved();$/;"	p	class:selblok	access:public	signature:()
moveevents	src/main.cpp	/^    boost::thread moveevents(MoveEvents);$/;"	p	file:	signature:(MoveEvents)
movel	src/blocks.h	/^   movel();$/;"	p	class:selblok	access:public	signature:()
mover	src/blocks.h	/^   mover();$/;"	p	class:selblok	access:public	signature:()
pos	src/blocks.h	/^   cord pos;$/;"	m	class:blok	access:private
root	src/main.cpp	/^    Window root = DefaultRootWindow(dpy); \/\/Get window of OS$/;"	l
rotatel	src/blocks.h	/^   rotatel();$/;"	p	class:selblok	access:public	signature:()
rotater	src/blocks.h	/^   rotater();$/;"	p	class:selblok	access:public	signature:()
rowblock	src/blocks.h	/^   rowblok rowblock[ROWS];$/;"	m	class:arrblok	access:private
rowblok	src/blocks.h	/^class rowblok$/;"	c
rowblok::block	src/blocks.h	/^   blok block[COLUNMS];$/;"	m	class:rowblok	access:private
rowblok::checkrow	src/blocks.h	/^   bool checkrow();$/;"	p	class:rowblok	access:public	signature:()
rowblok::checksquare	src/blocks.h	/^   bool checksquare(int x);$/;"	p	class:rowblok	access:public	signature:(int x)
rowblok::clearrow	src/blocks.h	/^   void clearrow();$/;"	p	class:rowblok	access:public	signature:()
rowblok::drawall	src/blocks.h	/^   void drawall();$/;"	p	class:rowblok	access:public	signature:()
selblock	src/blocks.h	/^   selblok selblock;$/;"	m	class:bord	access:private
selblok	src/blocks.h	/^class selblok$/;"	c
selblok::block	src/blocks.h	/^   blok block[4];$/;"	m	class:selblok	access:private
selblok::drawall	src/blocks.h	/^   drawall();$/;"	p	class:selblok	access:public	signature:()
selblok::moved	src/blocks.h	/^   moved();$/;"	p	class:selblok	access:public	signature:()
selblok::movel	src/blocks.h	/^   movel();$/;"	p	class:selblok	access:public	signature:()
selblok::mover	src/blocks.h	/^   mover();$/;"	p	class:selblok	access:public	signature:()
selblok::rotatel	src/blocks.h	/^   rotatel();$/;"	p	class:selblok	access:public	signature:()
selblok::rotater	src/blocks.h	/^   rotater();$/;"	p	class:selblok	access:public	signature:()
setcol	src/blocks.h	/^   void setcol(int col);$/;"	p	class:blok	access:public	signature:(int col)
setpos	src/blocks.h	/^   void setpos(const cord &pos);$/;"	p	class:blok	access:public	signature:(const cord &pos)
sleep	src/main.cpp	/^        boost::this_thread::sleep(time);$/;"	p	class:boost::this_thread	file:	signature:(time)
swa	src/main.cpp	/^    XSetWindowAttributes swa;$/;"	l
time	src/main.cpp	/^    boost::system_time time = boost::get_system_time();$/;"	l
time	src/main.cpp	/^    boost::system_time time;$/;"	l
vi	src/main.cpp	/^    XVisualInfo *vi = glXChooseVisual(dpy, 0, att); \/\/get closest visual to what we want$/;"	l
win	src/main.cpp	/^Window win;$/;"	v
xev	src/main.cpp	/^    XEvent xev;$/;"	l
xlibInit	src/main.cpp	/^void xlibInit()$/;"	f	signature:()
xlibInit	src/main.cpp	/^void xlibInit();$/;"	p	file:	signature:()
